library(stringr)
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data$longitude <- as.numeric(str_extract(geometry, "-?\\d+\\.\\d+"))
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry)))
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", data$geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", data$geometry)))
data <- data %>%
mutate(data$longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", data$geometry)),
data <- data %>%
mutate(data$longitude <- as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", data$geometry)),
data$latitude <- as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", data$geometry)))
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
if (sum(str_detect(data$geometry, "-?\\d+\\.\\d+")) == 0) {
stop("No latitude/longitude found in geometry column")
}
data <- cbind(longitude, latitude)
data <- data %>% mutate(longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+")))
data = data %>% filter(Occurrence_Year >= 2014) %>%
filter(Occurrence_Year < 2022)
summary_table = data %>% count(Occurrence_Year) %>%
rename(Year = Occurrence_Year, Theft_Count = n)
print(summary_table)
#omit all the entries that has NA inputs, they won't be helpful to our data
data <- na.omit(origin)
summary <- table(data$Occurrence_Year)
print(summary)
# Importing the dataset
origin <- read.csv("bicycle.csv")
#omit all the entries that has NA inputs, they won't be helpful to our data
data <- na.omit(origin)
summary <- table(data$Occurrence_Year)
print(summary)
data = data %>% filter(Occurrence_Year >= 2014) %>%
filter(Occurrence_Year < 2022)
summary_table = data %>% count(Occurrence_Year) %>%
rename(Year = Occurrence_Year, Theft_Count = n)
print(summary_table)
# Calculate average cost of bike by year
avg_cost_by_year <- data %>%
group_by(Occurrence_Year) %>%
summarize(avg_cost = mean(Cost_of_Bike))
# Create plot of average cost of bike by year
ggplot(avg_cost_by_year, aes(x = Occurrence_Year, y = avg_cost)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(x = "Occurrence Year", y = "Average Cost of Bike")
#ggtitle("Average Cost of Stolen Bikes by Occurrence Year")
ggplot(data = data, aes(x = Occurrence_Hour)) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue") +
labs(x = "Occurrence Hour", y = "Number of Thefts")
#ggtitle("Number of Thefts During each Hour")
coord_pattern <- "\\((-?\\d+\\.\\d+), (-?\\d+\\.\\d+)\\)"
# Extract the coordinates using string manipulation functions
data$longitude <- as.numeric(sub(coord_pattern, "\\1", data$geometry))
data$latitude <- as.numeric(sub(coord_pattern, "\\2", data$geometry))
# Create ggplot
ggplot(data, aes(y = latitude, x = longitude, fill = Cost_of_Bike)) +
geom_point(shape = 21, size = 2) +
scale_fill_gradient2(limits = range(data$Cost_of_Bike), low = "red", mid = "yellow",
high = "green", space = "Lab")
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data$latitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data = data %>% mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
ggplot(data, aes(y = latitude, x = longitude, fill = Cost_of_Bike)) +
geom_point(shape = 21, size = 2) +
scale_fill_gradient2(limits = range(data$Cost_of_Bike), low = "red", mid = "yellow",
high = "green", space = "Lab")
data$longitude <- as.numeric(str_extract(data$geometry, "-?\\d+\\.\\d+"))
data$latitude <- as.numeric(str_extract_all(data$geometry, "-?\\d+\\.\\d+")[[1]][2])
data <- data %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+geom_point()+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+geom_point()+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
filter(longitude <= -79.7 & longitude >= -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
filter(longitude <= -79.7 & longitude >= -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
#omit all the entries that has NA inputs, they won't be helpful to our data
data <- na.omit(origin)
summary <- table(data$Occurrence_Year)
print(summary)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
filter(longitude <= -79.7 & longitude >= -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
#omit all the entries that has NA inputs, they won't be helpful to our data
data <- na.omit(origin)
summary <- table(data$Occurrence_Year)
print(summary)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0) %>%  # filter out rows where longitude or latitude equals 0
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=900~"high",
(Cost_of_Bike<900 & Cost_of_Bike>=600)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab", palette="viridis")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradient2(low = "red", mid = "yellow",
high = "green", space = "Lab")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
my_colors <- c("red", "orange", "yellow", "green", "blue", "purple")
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_gradientn(colors = my_colors, limits = c(0, 900), breaks = c(0, 200, 400, 600, 800, 900))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
my_colors <- c("red", "orange", "yellow", "green", "blue", "purple")
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1)
data$cost_interval <- cut(data$Cost_of_Bike, breaks = c(0, 400, 600, 900), labels = c("low", "mid", "high"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=Cost_of_Bike))+
geom_point(alpha=0.5)+
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1)
data$cost_interval <- cut(data$Cost_of_Bike, breaks = c(0, 400, 600, 900), labels = c("low", "mid", "high"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=cost_interval))+
geom_point(alpha=0.5)+
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data,aes(y=latitude,x=longitude,color=cost_lost))+
geom_point(alpha=0.5)+
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.5) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Sharing Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
theme_bw()
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Sharing Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
theme_bw()
library(ggbackground)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
theme_bw()+
background_image(toronto.png)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- png::readPNG(toronto.png)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img.file <- system.file(file.path("images", "toronto.png"),
package = "ggpubr")
img <- png::readPNG(img.file)
img <- readPNG("toronto.png")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
theme_bw()+
background_image(img)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
background_image(img)
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude") +
theme(panel.background = element_rect(fill = "transparent", colour = NA, plot_bg = img))
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
background_image(img) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto2.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
background_image(img) +
geom_point(alpha = 0.25) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude")
# Extracting longitude and latitude using regular expressions
data <- data %>%
mutate(longitude = as.numeric(sub(".*\\((-?\\d+\\.\\d+),.*", "\\1", geometry)),
latitude = as.numeric(sub(".*,(\\s?-?\\d+\\.\\d+)\\)}", "\\1", geometry))) %>%
filter(longitude != 0 & latitude != 0 &
longitude > -79.7 & longitude < -79.1) %>%
mutate(cost_lost = case_when(Cost_of_Bike>=600~"high",
(Cost_of_Bike<600 & Cost_of_Bike>=400)~"mid",
TRUE ~"low"))
img <- readPNG("toronto2.png")
# Plot the data
ggplot(data, aes(x = longitude, y = latitude, color = cost_lost)) +
background_image(img) +
geom_point(alpha = 0.5) +
scale_color_manual(values = c("low" = "red", "mid" = "yellow", "high" = "green"),
name = "Cost of Bike") +
ggtitle("Bike Lost Locations in Toronto") +
xlab("Longitude") +
ylab("Latitude")
library(caret)
install.packages(caret)
install.packages('caret')
install.packages("caret")
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(caret)
library(stringr)
# Initiating libraries
library(tidyverse)
# Initiating libraries
library(tidyverse)
